using System;
using System.Data;
using System.Data.SqlClient;
using System.ComponentModel;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using Northwind.BusinessObjects;
using GL.DataProvider;

namespace Northwind.DataAccess
{
	/// <summary>
	/// Project's generated by SQL CSharp .Net
	/// Generated Class for Table : CustomersDA.
	/// Date: 19/06/2019
	/// Author: Trần Hoàng Tâm
	/// Email: tranhoangtam@gmail.com 
	/// </summary>
	public  partial class CustomersDA:DataObject<Customers>
	{

		#region Init
		public CustomersDA()
		{
			InsertCommand=" INSERT INTO [Customers] (CustomerID,CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country,Phone,Fax) VALUES ( 	@CustomerID,	@CompanyName,	@ContactName,	@ContactTitle,	@Address,	@City,	@Region,	@PostalCode,	@Country,	@Phone,	@Fax)"; 
			UpdateCommand="UPDATE [Customers] SET [CompanyName]=@CompanyName,[ContactName]=@ContactName,[ContactTitle]=@ContactTitle,[Address]=@Address,[City]=@City,[Region]=@Region,[PostalCode]=@PostalCode,[Country]=@Country,[Phone]=@Phone,[Fax]=@Fax WHERE  [CustomerID]=@CustomerID"; 
			DeleteCommand=" IF @DestroyData=1 DELETE FROM [Customers] WHERE  [CustomerID]=@CustomerIDELSE UPDATE [Customers] SET   [IsDeleted]=1  [CustomerID]=@CustomerID"; 
			IsDeleteCommand="SELECT TOP 1 1 FROM [Customers] WHERE  [CustomerID]=@CustomerID"; 
			SelectOneCommand="SELECT * FROM [Customers] WHERE  [CustomerID]=@CustomerID"; 
			SelectAllCommand="SELECT * FROM [Customers] ";
		}
		#endregion
		
		#region Take 
		public override IDataParameter[] TakeObject
			(
				Customers obj
			)
		{
			 return new [] 
			{
				new SqlParameter("CustomerID",obj.CustomerID),
				new SqlParameter("CompanyName",obj.CompanyName),
				new SqlParameter("ContactName",obj.ContactName),
				new SqlParameter("ContactTitle",obj.ContactTitle),
				new SqlParameter("Address",obj.Address),
				new SqlParameter("City",obj.City),
				new SqlParameter("Region",obj.Region),
				new SqlParameter("PostalCode",obj.PostalCode),
				new SqlParameter("Country",obj.Country),
				new SqlParameter("Phone",obj.Phone),
				new SqlParameter("Fax",obj.Fax),
			};
		}
		public override IDataParameter[] GetPrimaryKeys
			(
				Customers obj
			)
		{
			 return new [] 
			{
				new SqlParameter("CustomerID",obj.CustomerID),
			};
		}
		#endregion
		
		#region CreateKey

		public string CreateKey()
		{
			return CreateKey(string.Format("{0:yy.MM.dd.}",DateTime.Now),3);
		}

		public string CreateKey(string seri)
		{
			return CreateKey(seri,6);
		}

		public override string CreateKey(string seri,int length)
		{
			const string sql = "select max({1}) from [{0}] where [{1}] like N'{2}%'";
			var cmd = string.Format(sql, "Customers", "Code", seri);
			var Datavalue = GetScalar(cmd);
			var format = string.Empty;
			format = format.PadRight(length, '0');
			if (Datavalue != null)
			{
				if (seri.Length != 0)
				{
					Datavalue = Datavalue.ToString().Replace(seri, "");
				}
				if (!IsNumeric(Datavalue))
				return string.Format(seri + "{0:" + format + "}", Datavalue);
			}
			var value = Convert.ToInt32(Datavalue) + 1;
			return string.Format(seri + "{0:" + format + "}", value);
		}

		#endregion


		#region HasRow
		public bool HasRow
			(
				string customerid
			)
		{
			return GetScalar
			(
				CommandType.Text,
				SelectOneCommand,
				new []
				{
					new SqlParameter("@CustomerID",customerid),
				}
			)!=null;
		}

		#endregion

		#region IsAvaible

		public bool IsAvaible
			(
				string customerid
			)
		{
			return !HasRow 
			(
					customerid			);
		}

		#endregion

		#region GetBy
		public DataRow GetDataRow
			(
			string customerid
			)
		{
			return GetDataRow(CommandType.Text,SelectOneCommand,
				new []{
						new SqlParameter("@CustomerID",customerid),
					});
		}
		public DataTable GetDataBy
			(
			string customerid
			)
		{
			return GetDataTable(CommandType.Text,SelectOneCommand,
				new []{
						new SqlParameter("@CustomerID",customerid),
					});
		}
		public string FillBy
			(DataTable myTable,
			string customerid
			)
		{
			return Fill
			(
				CommandType.Text,
				SelectOneCommand,
				myTable,
				new []{
						new SqlParameter("@CustomerID",customerid),
					});
		}
		public IDataReader GetReader
			(
				string customerid
			)
		{
			return Reader(CommandType.Text,SelectOneCommand,
					new []{
						new SqlParameter("@CustomerID",customerid),
					});
		}
		public Customers Get
			(
				string customerid
			)
		{
			return Read
			(
				CommandType.Text,
				SelectOneCommand,
				new []
				{
					new SqlParameter("@CustomerID",customerid),
				}
			);
		}
		#region DealLock

		public bool IsDealLock()
		{
			GetScalar("SELECT TOP 1 1 FROM [Customers] SET LOCK_TIMEOUT 0");
			return Provider.HasError;
		}
		#endregion

		#endregion
		
		#region Populate DataRow

		public override Customers CreateObject(
			DataRow myRow)
		{
				Customers obj=null; 
				if (myRow!=null)
					{
						obj=new Customers(); 
						if (myRow.RowState== DataRowState.Added) 
						{
							obj.State =States.Added;
						}
						else if (myRow.RowState== DataRowState.Modified) 
						{
							obj.State = States.Changed;
						}
						else if (myRow.RowState == DataRowState.Unchanged || myRow.RowState == DataRowState.Detached) 
						{
							obj.State = States.Loaded;
						}
						else if (myRow.RowState== DataRowState.Deleted) 
						{
							obj.State = States.Deleted;
						}
						foreach (CustomersFields item in Enum.GetValues(typeof(CustomersFields)))
						{
							if (!Contains(myRow,item.ToString())) continue;
							var fieldname=Enum.GetName(typeof(CustomersFields),item); 
							switch (item)
							{
								case CustomersFields.CustomerID:
									if (!myRow.IsNull(fieldname))
									{
										obj.CustomerID=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.CompanyName:
									if (!myRow.IsNull(fieldname))
									{
										obj.CompanyName=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.ContactName:
									if (!myRow.IsNull(fieldname))
									{
										obj.ContactName=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.ContactTitle:
									if (!myRow.IsNull(fieldname))
									{
										obj.ContactTitle=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.Address:
									if (!myRow.IsNull(fieldname))
									{
										obj.Address=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.City:
									if (!myRow.IsNull(fieldname))
									{
										obj.City=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.Region:
									if (!myRow.IsNull(fieldname))
									{
										obj.Region=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.PostalCode:
									if (!myRow.IsNull(fieldname))
									{
										obj.PostalCode=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.Country:
									if (!myRow.IsNull(fieldname))
									{
										obj.Country=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.Phone:
									if (!myRow.IsNull(fieldname))
									{
										obj.Phone=System.Convert.ToString(myRow[fieldname]);
									}
									break;
								case CustomersFields.Fax:
									if (!myRow.IsNull(fieldname))
									{
										obj.Fax=System.Convert.ToString(myRow[fieldname]);
									}
									break;
							}
						}
					}
			return obj;
		}
		#endregion 

		#region Populate Reader

		public override Customers CreateObject(
			IDataReader myReader)
		{
				Customers obj=null; 
				if (myReader!=null)
					{
						obj=new Customers(); 
						obj.State = States.Loaded; 
						foreach (CustomersFields item in Enum.GetValues(typeof(CustomersFields)))
						{
							if (!Contains(myReader, item.ToString())) continue;
							var fieldname=Enum.GetName(typeof(CustomersFields),item); 
							switch (item)
							{
								case CustomersFields.CustomerID:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.CustomerID=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.CompanyName:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.CompanyName=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.ContactName:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.ContactName=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.ContactTitle:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.ContactTitle=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.Address:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.Address=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.City:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.City=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.Region:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.Region=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.PostalCode:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.PostalCode=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.Country:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.Country=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.Phone:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.Phone=System.Convert.ToString(myReader[fieldname]);
									}
									break;
								case CustomersFields.Fax:
									if (!myReader.IsDBNull(myReader.GetOrdinal(fieldname)))
									{
										obj.Fax=System.Convert.ToString(myReader[fieldname]);
									}
									break;
							}
						}
					}
			return obj;
		}
		#endregion 

		#region Flush DataTable

		public List<Customers> LoadFile(
			string filename)
		{
			List<Customers> list=new List<Customers>();
			if (!File.Exists(filename)) return list;
			var dt = new Customers().DesignTable();
			var ds = new DataSet("dsCustomers");
			dt.TableName = "Customers";
			ds.Tables.Add(dt);
			ds.ReadXml(filename);
			list=MapObject(ds.Tables["Customers"]);
			ds.Dispose();
			return list;
		}
		public DataTable LoadData(
			string filename)
		{
			if (!File.Exists(filename)) return null;
			var dt = new Customers().DesignTable();
			var ds = new DataSet("dsCustomers");
			dt.TableName = "Customers";
			ds.Tables.Add(dt);
			ds.ReadXml(filename);
			dt=ds.Tables["Customers"];
			ds.Dispose();
			return dt;
		}
		public void SaveFile(
			string filename)
		{
			var dt = GetData();
			var ds =new DataSet("dsCustomers");
			dt.TableName = "Customers";
			ds.Tables.Add(dt);
			ds.WriteXml(filename);
			ds.Dispose();
		}
		public void SaveFile
		(
			DataTable myTable,
			string filename
		)
		{
			var ds =new DataSet("dsCustomers");
			ds.Tables.Add(myTable);
			ds.WriteXml(filename);
			ds.Dispose();
		}
		#endregion 

		#region Delete
		public string Delete
			(
				string customerid
			)
		{
			return Execute
			(
				CommandType.Text, 
				DeleteCommand,
				new []
				{
					new SqlParameter("@CustomerID",customerid),
				}
			);
		}
		public string RollBack
			(
				string customerid
			)
		{
			return Execute
			(
				CommandType.StoredProcedure, 
				"Customers_RollBack",
				new []
				{
					new SqlParameter("@CustomerID",customerid),
				}
			);
		}
		public string IsDelete
			(
				string customerid
			)
		{
			return Execute
			(
				CommandType.Text,
				IsDeleteCommand,
				new []
				{
					new SqlParameter("@CustomerID",customerid),
				}
			);
		}
		public string Duplicate
		(
			string customerid
		)
		{
			return ExecuteWithProc
			(
				DuplicateCommand,
				new[]
				{
					new SqlParameter("@CustomerID",customerid),
				}
			);
		}
		#endregion
		
		#region GetList 
		
		public override List<Customers> GetList()
		{
			return ReadList
			(
				CommandType.Text,
				SelectAllCommand
			);
		}
		#endregion
		
		#region GetDataTable 
		
		public override DataTable GetData()
		{
			return GetDataTableWithProc(SelectAllCommand);
		}
		public override DataSet GetDataSet()
		{
			return GetDataSetWithProc(SelectAllCommand);
		}
		#endregion
		
		#region Fill DataTable 
		
		public override string Fill(System.Data.DataTable myTable)
		{
			return Fill(CommandType.Text,SelectAllCommand,myTable);
		}
		public override string Fill(System.Data.DataSet myDataSet)
		{
			return Fill(CommandType.Text,SelectAllCommand,myDataSet);
		}
		#endregion
		
	}
}
